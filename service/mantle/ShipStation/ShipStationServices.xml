<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="get" noun="ShippingRates">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRate"/>
        <in-parameters>
            <parameter name="shippingGatewayConfigId" default-value="SHIP_STATION_DEMO"/>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap"/>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>

            <!--~~~~~~~~~~~~~ Authorization ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoApiToken"/>
            </entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no Authorization, not requesting Shipping rates"/><return/></if>

            <!--~~~~~~~~~~~~~ shipment:routeSegment ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="hasIssues" from="false"/>
            <if condition="!shipment.fromPartyId">
                <return error="true" message="From party not set on shipment ${shipmentId}" /></if>
            <if condition="!shipment.toPartyId">
                <return error="true" message="To party not set on shipment ${shipmentId}"/></if>

            <set field="carrierCode" from="routeSegment.carrierPartyId"/>
            <if condition="carrierCode=='USPS'"><set field="carrierCode" value="stamps_com"/></if>
            <if condition="!carrierCode || carrierCode == '_NA_'">
                <return error="true" message="Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: routeSegment.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId">
                <log level="warn" message="Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayMethod" value-field="gatewayMethod">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="routeSegment.carrierPartyId"/>
                <field-map field-name="shipmentMethodEnumId" from="shipmentMethodEnumId" ignore-if-empty="true"/>
            </entity-find-one>

            <set field="serviceCode"/>
            <if condition="!gatewayMethod.gatewayServiceCode"><then>
                <log level="warn" message="Gateway method ${shipmentMethodEnumId} not set on for ${shippingGatewayConfigId}"/></then>
                <else><set field="serviceCode" from="gatewayMethod.gatewayServiceCode"/></else></if>


            <!--~~~~~~~~~~~~~ Address From ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>


            <if condition="!routeSegment.originPostalContactMechId">
                <return error="true" message="originPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/><return/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.originPostalContactMechId"/>
            </entity-find-one>

            <if condition="!originPostalAddress">
                <return error="true" message="Origin Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="fromPostalCode" from="originPostalAddress.postalCode"/>
            <if condition="!fromPostalCode">
                <return error="true" message="Origin Postal code is not found for ContactMechId: ${routeSegment.originPostalContactMechId}"/></if>

            <set field="fromCity" from="originPostalAddress.city"/>
            <set field="fromState"/>

            <if condition="originPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateFrom">
                    <field-map field-name="geoId" from="originPostalAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <set field="fromState" from="stateFrom.geoCodeAlpha2"/>
            </if>

            <!--~~~~~~~~~~~~~ Address To ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.destPostalContactMechId">
                <return error="true" message="destPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.destPostalContactMechId"/>
            </entity-find-one>

            <if condition="!destPostalAddress">
                <return error="true" message="Destination Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <if condition="destPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateTo">
                    <field-map field-name="geoId" from="destPostalAddress.stateProvinceGeoId"/></entity-find-one>
                <set field="toState" from="stateTo.geoCodeAlpha2"/>
                <else><if condition="carrierCode=='UPS'">
                    <return error="true" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>
                    <log level="warn" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>

            <set field="toCountry"/>
            <if condition="destPostalAddress.countryGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="countryTo">
                    <field-map field-name="geoId" from="destPostalAddress.countryGeoId"/></entity-find-one>
                <set field="toCountry" from="countryTo.geoCodeAlpha2"/>
                <else><return error="true" message="CountryGeoId  is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>

            <set field="toPostalCode" from="destPostalAddress.postalCode"/>
            <if condition="!toPostalCode">
                <return error="true" message="Destination Postal code is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>
            <set field="toCity" from="destPostalAddress.city"/>

            <!--~~~~~~~~~~~~~ Shipment Package ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="packages">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId" />
            </entity-find-one>

            <if condition="!packages">
                <return error="true" message="Any package not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/><return/></if>
            <if condition="!packages.weightUomId">
                <return error="true" message="Weight or WeightUomId not set for Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>

            <entity-find-one entity-name="moqui.basic.UomConversion" value-field="conversion">
                <field-map field-name="uomId" from="packages.weightUomId"/>
                <field-map field-name="toUomId" value="WT_oz"/>
            </entity-find-one>

            <set field="convertedWeight" from="packages.weight*conversion.conversionFactor"/>
            <set field="weight" from="[value: convertedWeight, unit: 'ounce']"/>
            <set field="dimensions" from="[:]"/>

            <set field="packageCode" from="packages.shipmentBoxTypeId"/>
            <if condition="packageCode">
                    <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="box">
                        <field-map field-name="shipmentBoxTypeId" from="packages.shipmentBoxTypeId"/>
                    </entity-find-one>
                <set field="dimensions" from="[height:box.boxHeight,width:box.boxWidth,length:box.boxLength,unit:'inch']"/>
                <else><log level="warn" message="Shipment Box Type not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/></else>
            </if>

            <set field="residential" from="(destPostalAddress.commercial==null || destPostalAddress.commercial=='N')?true:false"/>

            <!--                        <set field="requestMap" from= "[-->
<!--                carrierCode:'stamps_com',-->
<!--                serviceCode: null,-->
<!--                packageCode: null,-->
<!--                fromPostalCode: 78703,-->
<!--                toState: 'DC',-->
<!--                toCountry: 'US',-->
<!--                toPostalCode: 20500,-->
<!--                toCity: 'Washington',-->
<!--                weight: [-->
<!--                    value: 3,-->
<!--                    units: 'ounces'-->
<!--                ],-->
<!--                dimensions: [-->
<!--                    units: 'inches',-->
<!--                    length: 7,-->
<!--                    width: 5,-->
<!--                    height: 6-->
<!--                ],-->
<!--                confirmation: 'delivery',-->
<!--                residential: false-->
<!--            ]"/>     &lt;!&ndash;request map&ndash;&gt;-->
            <set field="requestMap" from="[carrierCode:carrierCode,serviceCode:serviceCode,fromPostalCode:fromPostalCode,
            fromCity:fromCity,fromState:fromState,fromWarehouseId:null,toCountry:toCountry,toPostalCode:toPostalCode,
            toCity:toCity,weight:weight,dimensions:dimensions,confirmation:'delivery',residential:residential]"/>
            <set field="responseMap" from="[]"/>
            <set field="errMsg" type="String"/>
            <log level="warn" message="========================${requestMap}======================="/>
            <!--~~~~~~~~~~~~~ Rest Api Call ~~~~~~~~~~~~~-->

            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "Basic ${apiToken}")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("ssapi.shipstation.com").port(443).path("shipments/getrates").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
        </actions>
    </service>
</services>
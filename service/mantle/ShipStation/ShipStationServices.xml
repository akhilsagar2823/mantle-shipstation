<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <!--  =============================================  -->
    <!--  ========== Shipping Rates Service ===========  -->
    <!--  =============================================  -->
    <service verb="request" noun="ShippingRates">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRate"/>
        <in-parameters>
            <parameter name="shippingGatewayConfigId" default-value="SHIP_STATION_DEMO"/>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap"/>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>

            <!--~~~~~~~~~~~~~ Authorization ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoApiToken"/>
            </entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><return error="true" message="Shipping gateway ${shippingGatewayConfigId} has no Authorization, not requesting Shipping rates"/><return/></if>

            <!--~~~~~~~~~~~~~ shipment:routeSegment ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <if condition="!shipment.fromPartyId">
                <return error="true" message="From party not set on shipment ${shipmentId}" /></if>
            <if condition="!shipment.toPartyId">
                <return error="true" message="To party not set on shipment ${shipmentId}"/></if>

            <set field="carrierCode" from="routeSegment.carrierPartyId"/>
            <if condition="!carrierCode || carrierCode == '_NA_'">
                <return error="true" message="Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: routeSegment.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId">
                <log level="warn" message="Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayMethod" value-field="gatewayMethod">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="carrierCode"/>
                <field-map field-name="shipmentMethodEnumId" from="shipmentMethodEnumId" ignore-if-empty="true"/>
            </entity-find-one>

            <set field="serviceCode"/>
            <if condition="!gatewayMethod.gatewayServiceCode"><then>
                <log level="warn" message="Gateway method ${shipmentMethodEnumId} not set on for ${shippingGatewayConfigId}"/></then>
                <else><set field="serviceCode" from="gatewayMethod.gatewayServiceCode"/></else></if>


            <!--~~~~~~~~~~~~~ Address From ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>


            <if condition="!routeSegment.originPostalContactMechId">
                <return error="true" message="originPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/><return/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.originPostalContactMechId"/>
            </entity-find-one>

            <if condition="!originPostalAddress">
                <return error="true" message="Origin Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <set field="fromPostalCode" from="originPostalAddress.postalCode"/>
            <if condition="!fromPostalCode">
                <return error="true" message="Origin Postal code is not found for ContactMechId: ${routeSegment.originPostalContactMechId}"/></if>

            <set field="fromCity" from="originPostalAddress.city"/>


            <if condition="originPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateFrom">
                    <field-map field-name="geoId" from="originPostalAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <set field="fromState" from="stateFrom.geoCodeAlpha2"/>
            </if>

            <!--~~~~~~~~~~~~~ Address To ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.destPostalContactMechId">
                <return error="true" message="destPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.destPostalContactMechId"/>
            </entity-find-one>

            <if condition="!destPostalAddress">
                <return error="true" message="Destination Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <if condition="destPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateTo">
                    <field-map field-name="geoId" from="destPostalAddress.stateProvinceGeoId"/></entity-find-one>
                <set field="toState" from="stateTo.geoCodeAlpha2"/>
                <else><if condition="carrierCode=='UPS'">
                    <return error="true" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>
                    <log level="warn" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>
            <set field="toPostalCode" from="destPostalAddress.postalCode"/>
            <if condition="!toPostalCode">
                <return error="true" message="Destination Postal code is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>

            <set field="toCity" from="destPostalAddress.city"/>

            <set field="toCountry"/>
            <if condition="destPostalAddress.countryGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="countryTo">
                    <field-map field-name="geoId" from="destPostalAddress.countryGeoId"/></entity-find-one>
                <set field="toCountry" from="countryTo.geoCodeAlpha2"/>
                <else><return error="true" message="CountryGeoId  is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>


            <!--~~~~~~~~~~~~~ Shipment Package ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="packages">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId" />
            </entity-find-one>

            <if condition="!packages">
                <return error="true" message="Any package not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/><return/></if>
            <if condition="!packages.weightUomId">
                <return error="true" message="Weight or WeightUomId not set for Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>

            <entity-find-one entity-name="moqui.basic.UomConversion" value-field="conversion">
                <field-map field-name="uomId" from="packages.weightUomId"/>
                <field-map field-name="toUomId" value="WT_oz"/>
            </entity-find-one>

            <set field="convertedWeight" from="packages.weight*conversion.conversionFactor"/>
            <set field="weight" from="[value: convertedWeight, unit: 'ounce']"/>
            <set field="dimensions" from="[:]"/>

            <set field="packageCode" from="packages.shipmentBoxTypeId"/>
            <if condition="packageCode">
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="box">
                    <field-map field-name="shipmentBoxTypeId" from="packages.shipmentBoxTypeId"/>
                </entity-find-one>
                <set field="packageCode" from="box.gatewayBoxId"/>
                <set field="dimensions" from="[height:box.boxHeight,width:box.boxWidth,length:box.boxLength,unit:'inch']"/>
                <else><log level="warn" message="Shipment Box Type not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/></else>
            </if>
            <set field="residential" from="(destPostalAddress.commercial==null || destPostalAddress.commercial=='N')?true:false"/>
            <if condition="carrierCode=='USPS'"><set field="carrierCode" value="stamps_com"/></if>
            <if condition="carrierCode=='UPS'"><set field="carrierCode" value="ups_walleted"/></if>
            <set field="requestMap" from="[carrierCode:carrierCode,serviceCode:serviceCode,packageCode:packageCode,fromPostalCode:fromPostalCode,
            fromCity:fromCity,fromState:fromState,fromWarehouseId:null,toCountry:toCountry,toPostalCode:toPostalCode,
            toCity:toCity,weight:weight,dimensions:dimensions,confirmation:'delivery',residential:residential]"/>
            <set field="responseMap" from="[]"/>
            <set field="errMsg" type="String"/>
            <log level="warn" message="========================${requestMap}======================="/>
            <!--~~~~~~~~~~~~~ Rest Api Call ~~~~~~~~~~~~~-->

            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "Basic ${apiToken}")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("ssapi.shipstation.com").port(443).path("shipments/getrates").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
        </actions>
    </service>

    <!--  =============================================  -->
    <!--  =========== Create Label Service ============  -->
    <!--  =============================================  -->
    <service verb="request" noun="CreateLabel">
        <implements service="mantle.shipment.CarrierServices.request#ShippingLabels"/>
        <in-parameters>
<!--            <parameter name="shipmentPackageSeqId" required="true"/>-->
            <parameter name="shippingGatewayConfigId" default-value="SHIP_STATION_DEMO"/>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap"/>
            <parameter name="responseMap"/>
            <parameter name="errMsg"/>
            <parameter name="restClientFuture"/>
            <parameter name="futurePackageRouteSegList"/>
        </out-parameters>
        <actions>

            <!--~~~~~~~~~~~~~ Authorization ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="SgoApiToken"/>
            </entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><return error="true" message="Shipping gateway ${shippingGatewayConfigId} has no Authorization, not creating label"/><return/></if>

            <!--~~~~~~~~~~~~~ shipment:routeSegment ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="!shipment"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="!routeSegment"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>


            <if condition="!shipment.fromPartyId">
                <return error="true" message="From party not set on shipment ${shipmentId}" /></if>
            <if condition="!shipment.toPartyId">
                <return error="true" message="To party not set on shipment ${shipmentId}"/></if>

            <set field="carrierCode" from="routeSegment.carrierPartyId"/>
            <if condition="!carrierCode || carrierCode == '_NA_'">
                <return error="true" message="Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: routeSegment.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId">
                <return error="true" message="Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayMethod" value-field="gatewayMethod">
                <field-map field-name="shippingGatewayConfigId"/>
                <field-map field-name="carrierPartyId" from="carrierCode"/>
                <field-map field-name="shipmentMethodEnumId" ignore-if-empty="true"/>
            </entity-find-one>

            <set field="serviceCode"/>
            <if condition="!gatewayMethod"><then>
                <return error="true" message="Gateway method ${shipmentMethodEnumId} not set on for ${shippingGatewayConfigId}"/></then>
                <else><set field="serviceCode" from="gatewayMethod.gatewayServiceCode"/></else></if>


            <!--~~~~~~~~~~~~~ Address From ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                              in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>


            <if condition="!routeSegment.originPostalContactMechId">
                <return error="true" message="originPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/><return/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.originPostalContactMechId"/>
            </entity-find-one>

            <if condition="!originPostalAddress">
                <return error="true" message="Origin Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="fromPostalCode" from="originPostalAddress.postalCode"/>
            <if condition="!fromPostalCode">
                <return error="true" message="Origin Postal code is not found for ContactMechId: ${routeSegment.originPostalContactMechId}"/></if>

            <set field="fromCity" from="originPostalAddress.city"/>
            <set field="fromState"/>

            <if condition="originPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateFrom">
                    <field-map field-name="geoId" from="originPostalAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <set field="fromState" from="stateFrom.geoCodeAlpha2"/>
            </if>

            <set field="fromCountry"/>
            <if condition="originPostalAddress.countryGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="countryTo">
                    <field-map field-name="geoId" from="originPostalAddress.countryGeoId"/></entity-find-one>
                <set field="fromCountry" from="countryTo.geoCodeAlpha2"/>
                <else><return error="true" message="CountryGeoId  is not found for ContactMechId: ${routeSegment.originPostalContactMechId}"/></else>
            </if>
            <set field="originTelecomContactMechId" from="originPostalAddress.telecomContactMechId"/>
            <if condition="!originTelecomContactMechId">
                <log level="warn" message="telecomContactMechId not set for Origin ${originPostalContactMechId}"/>
                <else>
                    <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomFrom">
                    <field-map field-name="contactMechId" from="originTelecomContactMechId"/></entity-find-one>
                    <set field="fromPhone" from="telecomFrom.areaCode+'-'+telecomFrom.contactNumber"/>
                </else>
            </if>
            <set field="originResidentialIndicator" from="(originPostalAddress.commercial==null || originPostalAddress.commercial=='Y')?false:true"/>


            <set field="shipFrom" from="[name:originPostalAddress.toName,company:originPostalAddress.attnName,
                street1:originPostalAddress.address1,street2:originPostalAddress.address2,city:fromCity,state:fromState,
                postalCode:fromPostalCode,country:fromCountry,phone:fromPhone,residential:originResidentialIndicator]"/>


            <!--~~~~~~~~~~~~~ Address To ~~~~~~~~~~~~~~~~-->

            <if condition="!routeSegment.destPostalContactMechId">
                <return error="true" message="destPostalContactMechId not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="routeSegment.destPostalContactMechId"/>
            </entity-find-one>

            <if condition="!destPostalAddress">
                <return error="true" message="Destination Postal Address is not found for shipment ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <if condition="destPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateTo">
                    <field-map field-name="geoId" from="destPostalAddress.stateProvinceGeoId"/></entity-find-one>
                <set field="toState" from="stateTo.geoCodeAlpha2"/>
                <else><if condition="carrierCode=='UPS'">
                    <return error="true" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>
                    <log level="warn" message="State Province is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>


            <set field="toPostalCode" from="destPostalAddress.postalCode"/>
            <if condition="!toPostalCode">
                <return error="true" message="Destination Postal code is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></if>

            <set field="toCity" from="destPostalAddress.city"/>
            <set field="toState"/>

            <if condition="destPostalAddress.stateProvinceGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="stateTo">
                    <field-map field-name="geoId" from="destPostalAddress.stateProvinceGeoId"/>
                </entity-find-one>
                <set field="toState" from="stateTo.geoCodeAlpha2"/>
            </if>

            <set field="toCountry"/>
            <if condition="destPostalAddress.countryGeoId">
                <entity-find-one entity-name="moqui.basic.Geo" value-field="countryTo">
                    <field-map field-name="geoId" from="destPostalAddress.countryGeoId"/></entity-find-one>
                <set field="toCountry" from="countryTo.geoCodeAlpha2"/>
                <else><return error="true" message="CountryGeoId  is not found for ContactMechId: ${routeSegment.destPostalContactMechId}"/></else>
            </if>

            <set field="destTelecomContactMechId" from="destPostalAddress.telecomContactMechId"/>
            <if condition="!destTelecomContactMechId">
                <log level="warn" message="telecomContactMechId not set for dest ${destPostalContactMechId}"/>
                <else>
                    <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomTo">
                        <field-map field-name="contactMechId" from="destTelecomContactMechId"/></entity-find-one>
                    <set field="toPhone" from="telecomTo.areaCode+'-'+telecomTo.contactNumber"/>
                </else>
            </if>
            <set field="destResidentialIndicator" from="(destPostalAddress.commercial==null || destPostalAddress.commercial=='N')?true:false"/>

            <set field="shipTo" from="[name:destPostalAddress.toName,company:destPostalAddress.attnName,
                street1:destPostalAddress.address1,street2:destPostalAddress.address2,city:toCity,state:toState,
                postalCode:toPostalCode,country:toCountry,phone:toPhone,residential:destResidentialIndicator]"/>


            <!--~~~~~~~~~~~~~ Shipment Package ~~~~~~~~~~~~~-->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="packages">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId" />
            </entity-find-one>

            <if condition="!packages">
                <return error="true" message="Any package not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/><return/></if>
            <if condition="!packages.weightUomId">
                <return error="true" message="Weight or WeightUomId not set for Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>

            <entity-find-one entity-name="moqui.basic.UomConversion" value-field="conversion">
                <field-map field-name="uomId" from="packages.weightUomId"/>
                <field-map field-name="toUomId" value="WT_oz"/>
            </entity-find-one>

            <set field="convertedWeight" from="packages.weight*conversion.conversionFactor"/>
            <set field="weight" from="[value: convertedWeight, unit: 'ounce']"/>
            <set field="dimensions" from="[:]"/>

            <set field="packageCode" from="packages.shipmentBoxTypeId"/>
            <if condition="packageCode">
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="box">
                    <field-map field-name="shipmentBoxTypeId" from="packages.shipmentBoxTypeId"/>
                </entity-find-one>
                <set field="packageCode" from="box.gatewayBoxId"/>
                <set field="dimensions" from="[height:box.boxHeight,width:box.boxWidth,length:box.boxLength,unit:'inch']"/>
                <else><log level="warn" message="Shipment Box Type not set on shipment ${shipmentId}:${shipmentPackageSeqId}"/></else>
            </if>
            <set field="shipDate" from="ec.user.nowTimestamp"/>
            <set field="residential" from="(destPostalAddress.commercial==null || destPostalAddress.commercial=='N')?true:false"/>
            <if condition="carrierCode=='USPS'"><set field="carrierCode" value="stamps_com"/></if>
            <if condition="carrierCode=='UPS'"><set field="carrierCode" value="ups_walleted"/></if>

            <set field="requestMap" from="[carrierCode:carrierCode,serviceCode:serviceCode,packageCode:packageCode,confirmation:'delivery',
                    shipDate:shipDate,weight:weight,dimensions:dimensions,shipFrom:shipFrom,shipTo:shipTo]"/>
            <set field="responseMap" from="[:]"/>
            <set field="errMsg" type="String"/>

            <!--            <set field="requestMap" from="[
                          'carrierCode': 'ups_walleted',
                          'serviceCode': 'ups_ground',
                          'packageCode': 'package',
                          'confirmation': 'delivery',
                          'shipDate': '2023-04-03',
                          'weight': [
                            'value': 3,
                            'units': 'ounces'
                          ],
                          'dimensions': [
                            'units': 'inches',
                            'length': 7,
                            'width': 5,
                            'height': 6
                          ],
                          'shipFrom': [
                            'name': 'Jason Hodges',
                            'company': 'ShipStation',
                            'street1': '2815 Exposition Blvd',
                            'street2': 'Ste 2353242',
                            'street3': null,
                            'city': 'Austin',
                            'state': 'TX',
                            'postalCode': '78703',
                            'country': 'US',
                            'phone': null,
                            'residential': false
                          ],
                          'shipTo': [
                            'name': 'The President',
                            'company': 'US Govt',
                            'street1': '1600 Pennsylvania Ave',
                            'street2': 'Oval Office',
                            'street3': null,
                            'city': 'Washington',
                            'state': 'DC',
                            'postalCode': '20500',
                            'country': 'US',
                            'phone': null,
                            'residential': false
                          ],
                          'insuranceOptions': null,
                          'internationalOptions': null,
                          'advancedOptions': null,
                          'testLabel': false
                        ]"/>-->
            <log level="warn" message="========================================${apiToken}///========================="/>
            <!--~~~~~~~~~~~~~ Rest Api Call ~~~~~~~~~~~~~-->
            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                    .addHeader("Authorization", "Basic ${apiToken}")
                    .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("ssapi.shipstation.com").port(443).path("shipments/createlabel").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
            <!--
            <set field="responseMap" from="[
                'shipmentId': '123456789',
                'orderId': null,
                'userId': null,
                'customerEmail': null,
                'orderNumber': null,
                'createDate': '2016-04-03T12:11:36.8630000',
                'shipDate': '2016-04-03',
                'shipmentCost': 9.06,
                'insuranceCost': 0,
                'trackingNumber': '782390443992',
                'isReturnLabel': false,
                'batchNumber': null,
                'carrierCode': 'fedex',
                'serviceCode': 'fedex_ground',
                'packageCode': 'package',
                'confirmation': 'delivery',
                'warehouseId': null,
                'voided': false,
                'voidDate': null,
                'marketplaceNotified': false,
                'notifyErrorMessage': null,
                'shipTo': null,
                'weight': null,
                'dimensions': null,
                'insuranceOptions': null,
                'advancedOptions': null,
                'shipmentItems': null,
                'labelData': 'JVBERi0xLjQKJeLjz9MKMiAwIG9iago8PC9MZW5ndGggNjIvRmlsdGVyL0ZsYXRlRGVjb2RlPj5zdHJlYW0KeJwr5HIK4TI2U...',
                'formData': null
            ]"/>
            <log level="error" message="${responseMap}"/>
            -->

            <!-- ~~~~~~~~~~~~~ Read Response ~~~~~~~~~~~~~ -->

            <!-- ~~~~~~~~~~~~~ Shipment Package Route Segment ~~~~~~~~~~~~~ -->
            <entity-find-one entity-name="mantle.shipment.ShipmentPackageRouteSeg" value-field="packageRouteSeg">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentRouteSegmentSeqId"/>
                <field-map field-name="shipmentPackageSeqId"/>
            </entity-find-one>
            <if condition="!packageRouteSeg">
                <return error="true" message="ShipmentPackageRouteSeg not set for Shipment Package ${shipmentId}:${shipmentPackageSeqId} to store the response !!!"/>
            </if>
            <set field="labelData" from="responseMap.labelData"/>
            <script>
                //import org.apache.pdfbox.rendering
                //import java.awt.Image
                byte[] labelBytes = Base64.base64Decode(labelData.getBytes());
                org.apache.pdfbox.rendering.PDFRenderer pdfRenderer = new org.apache.pdfbox.rendering.PDFRenderer(PDDocument.load(labelBytes));
                java.awt.image.BufferedImage bim = pdfRenderer.renderImageWithDPI(0, 300, ImageType.RGB);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bim, "png", baos);
                byte[] imageBytes = baos.toByteArray();
                packageMap.put("labelData", imageBytes);
            </script>
            <set field="labelData" from="imageBytes"/>

            <log level="warn"  message="===================${labelData}=============================="/>
            <log level="warn"  message="===================${bim}=============================="/>
            <log level="warn"  message="===================${imageBytes}=============================="/>
            <set field="packageRouteSeg.gatewayLabelId" from="responseMap.shipmentId"/>
            <set field="packageRouteSeg.trackingCode" from="responseMap.trackingNumber"/>
            <set field="packageRouteSeg.labelDate" from="ec.l10n.parseTimestamp(responseMap.createDate, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/>
            <set field="packageRouteSeg.baseAmount" from="responseMap.shipmentCost as BigDecimal"/>
            <set field="packageRouteSeg.insuranceAmount" from="responseMap.insuranceCost as BigDecimal"/>
            <set field="packageRouteSeg.actualAmount" from="packageRouteSeg.insuranceAmount+packageRouteSeg.baseAmount"/>
            <set field="packageRouteSeg.labelImage" from="labelData"/>
            <!-- ~~~~~~~~~~~~~ ShipmentPackageRouteSeg Entity Update ~~~~~~~~~~~~~ -->
            <entity-update value-field="packageRouteSeg"/>
            <log level="info" message="Update Successful"/>
        </actions>
    </service>

    <!--  =============================================  -->
    <!--  ============ Void Label Service =============  -->
    <!--  =============================================  -->
    <service verb="void" noun="ShippingLabel">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shipmentRouteSegmentSeqId" required="true"/>
            <parameter name="shipmentPackageSeqId" />
            <parameter name="shippingGatewayConfigId" required="true" default-value="SHIP_STATION_DEMO"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
            <parameter name="requestMap"/>
            <parameter name="errMsg"/>
        </out-parameters>
        <actions>
            <!-- ~~~~~~~~~~~~~ Authorization ~~~~~~~~~~~~~ -->
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId" />
                <field-map field-name="optionEnumId" value="SgoApiToken"/>
            </entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><return error="true" message="Shipping gateway ${shippingGatewayConfigId} has no Authorization, not voiding any label"/><return/></if>

            <!-- ~~~~~~~~~~~~~ shipment:routeSegment:package ~~~~~~~~~~~~~ -->
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="!shipment"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="!routeSegment"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="packages"/>
            <if condition="packages == null"><log level="warn" message="Shipment Package not found with ID ${shipmentId}:${shipmentPackageSeqId}"/></if>

            <!-- ~~~~~~~~~~~~~ Shipment Package Route Segment ~~~~~~~~~~~~~ -->

            <entity-find-one entity-name="mantle.shipment.ShipmentPackageRouteSeg" value-field="packageRouteSeg">
                <field-map field-name="shipmentId"/>
                <field-map field-name="shipmentRouteSegmentSeqId"/>
            </entity-find-one>
            <if condition="!packageRouteSeg">
                <return error="true" message="Shipment Package Route Segment not found with Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>
            <if condition="!packageRouteSeg.gatewayLabelId">
                <return error="true" message="Shipment Id not found with Shipment Package ${shipmentId}:${shipmentPackageSeqId}"/></if>
            <set field="shipmentId" from="packageRouteSeg.gatewayLabelId"/>
            <set field="requestMap" from="[shipmentId:shipmentId]"/>

            <!-- ~~~~~~~~~~~~~ Rest Api Call ~~~~~~~~~~~~~ -->
            <script>
                <![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                    .addHeader("Authorization", "Basic ${apiToken}")
                    .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("ssapi.shipstation.com").port(443).path("shipments/voidlabel").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        errMsg = restResponse.text()
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]>
            </script>
        </actions>
    </service>
</services>
